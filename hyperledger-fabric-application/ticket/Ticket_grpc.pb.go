// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: Ticket.proto

package ticket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Ticket_ReadTicketById_FullMethodName = "/ticket.Ticket/ReadTicketById"
	Ticket_TransferTicket_FullMethodName = "/ticket.Ticket/TransferTicket"
)

// TicketClient is the client API for Ticket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketClient interface {
	ReadTicketById(ctx context.Context, in *ReadTicketByIdRequest, opts ...grpc.CallOption) (*ReadTicketByIdReply, error)
	TransferTicket(ctx context.Context, in *TransferTicketRequest, opts ...grpc.CallOption) (*TransferTicketReply, error)
}

type ticketClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketClient(cc grpc.ClientConnInterface) TicketClient {
	return &ticketClient{cc}
}

func (c *ticketClient) ReadTicketById(ctx context.Context, in *ReadTicketByIdRequest, opts ...grpc.CallOption) (*ReadTicketByIdReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadTicketByIdReply)
	err := c.cc.Invoke(ctx, Ticket_ReadTicketById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) TransferTicket(ctx context.Context, in *TransferTicketRequest, opts ...grpc.CallOption) (*TransferTicketReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferTicketReply)
	err := c.cc.Invoke(ctx, Ticket_TransferTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketServer is the server API for Ticket service.
// All implementations must embed UnimplementedTicketServer
// for forward compatibility.
type TicketServer interface {
	ReadTicketById(context.Context, *ReadTicketByIdRequest) (*ReadTicketByIdReply, error)
	TransferTicket(context.Context, *TransferTicketRequest) (*TransferTicketReply, error)
	mustEmbedUnimplementedTicketServer()
}

// UnimplementedTicketServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTicketServer struct{}

func (UnimplementedTicketServer) ReadTicketById(context.Context, *ReadTicketByIdRequest) (*ReadTicketByIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTicketById not implemented")
}
func (UnimplementedTicketServer) TransferTicket(context.Context, *TransferTicketRequest) (*TransferTicketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferTicket not implemented")
}
func (UnimplementedTicketServer) mustEmbedUnimplementedTicketServer() {}
func (UnimplementedTicketServer) testEmbeddedByValue()                {}

// UnsafeTicketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketServer will
// result in compilation errors.
type UnsafeTicketServer interface {
	mustEmbedUnimplementedTicketServer()
}

func RegisterTicketServer(s grpc.ServiceRegistrar, srv TicketServer) {
	// If the following call pancis, it indicates UnimplementedTicketServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ticket_ServiceDesc, srv)
}

func _Ticket_ReadTicketById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadTicketByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).ReadTicketById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ticket_ReadTicketById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).ReadTicketById(ctx, req.(*ReadTicketByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_TransferTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).TransferTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ticket_TransferTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).TransferTicket(ctx, req.(*TransferTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ticket_ServiceDesc is the grpc.ServiceDesc for Ticket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ticket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticket.Ticket",
	HandlerType: (*TicketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadTicketById",
			Handler:    _Ticket_ReadTicketById_Handler,
		},
		{
			MethodName: "TransferTicket",
			Handler:    _Ticket_TransferTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Ticket.proto",
}
